#!/usr/bin/env python2.7
#
# This script tests for greedy configure scripts in recipe builds, which link
# against things based on their existence in the sysroot.
#
# It does so by building the specified target, then rebuilding all of its
# dependencies from scratch, one by one, monitoring for buildhistory changes.

import argparse
import bb_test
import contextlib
import os
import sh
import shutil
import sys


@contextlib.contextmanager
def chdir(directory):
    olddir = os.path.abspath(os.getcwd())
    os.chdir(directory)
    yield
    os.chdir(olddir)


def main(cmdline_args):
    skipped_suffixes = ['-native', '-cross', '-cross-canadian']
    parser = argparse.ArgumentParser(description='Run greedy deps tests')
    parser.add_argument('target', default='core-image-base', nargs='?',
                        help='target whose recipes should be rebuilt one-by-one (default: %(default)s)')
    parser.add_argument('-x', dest='excludetarget', default='pseudo-native',
                        help='whose recipes should be excluded (default: %(default)s)')
    parser.add_argument('-p', dest='populatetarget',
                        help='used to prepopulate tmpdir (default: same as target)')
    parser.add_argument('-o', '--outputdir', default='{}-build'.format(os.path.basename(__file__)),
                        help='where the script output will go (default: %(default)s)')
    parser.add_argument('-s', '--short-circuit', action='store_true',
                        help='test only the specified target, not its dependencies')
    parser.add_argument('-w', '--wipe', action='store_true',
                        help='start from scratch, wiping the outputdir before testing')
    parser.add_argument('-k', '--keep-going', action='store_true',
                        help='keep going after encountering a failure, to gather up all the problems in one run')

    args = parser.parse_args(cmdline_args[1:])
    if args.populatetarget is None:
        args.populatetarget = args.target

    with open('conf/auto.conf', 'w') as conf:
        conf.write('TOPDIR = "{}"\n'.format(os.path.abspath(args.outputdir)))
        conf.write('TMPDIR = "${TOPDIR}/tmp"\n')
        conf.write('SSTATE_MIRRORS = ""\n')
        conf.write('SSTATE_DIR = "${TOPDIR}/sstate-cache"\n')
        conf.write('INHERIT += "buildhistory"\n')
        conf.write('BUILDHISTORY_DIR = "${TOPDIR}/buildhistory"\n')
        conf.write('BUILDHISTORY_COMMIT = "1"\n')

    if args.wipe:
        with bb_test.status('Wiping output directory'):
            shutil.rmtree(args.outputdir, ignore_errors=True)

    with bb_test.status('Building {}'.format(args.target)):
        bb_test.bitbake(args.target)

    if args.short_circuit:
        recipes = [args.target]
    else:
        recipes = list(bb_test.for_each_recipe(args.target, args.excludetarget))

        with bb_test.status('Verifying dependent recipes are built'):
            bb_test.bitbake(*recipes)

    if args.populatetarget not in recipes:
        # We don't mind if these things are built from sstate, we just need
        # their contents added to the sysroots, to affect the rebuilt recipes
        with open('conf/auto.conf', 'w') as conf:
            conf.write('TOPDIR = "{}"\n'.format(os.path.abspath(args.outputdir)))
            conf.write('TMPDIR = "${TOPDIR}/tmp"\n')

        with bb_test.status('Building {} to prepopulate tmpdir'.format(args.populatetarget)):
            bb_test.bitbake(*(args.populatetarget.split()))

        with open('conf/auto.conf', 'w') as conf:
            conf.write('TOPDIR = "{}"\n'.format(os.path.abspath(args.outputdir)))
            conf.write('TMPDIR = "${TOPDIR}/tmp"\n')
            conf.write('SSTATE_MIRRORS = ""\n')
            conf.write('SSTATE_DIR = "${TOPDIR}/sstate-cache"\n')
            conf.write('INHERIT += "buildhistory"\n')
            conf.write('BUILDHISTORY_DIR = "${TOPDIR}/buildhistory"\n')
            conf.write('BUILDHISTORY_COMMIT = "1"\n')

    recipe_count = len(recipes)
    for current, recipe in enumerate(recipes):
        skip = False
        for suffix in skipped_suffixes:
            if recipe.endswith(suffix):
                print('Skipping {}, as it is not packaged'.format(recipe))
                skip = True
                break

        if skip:
            continue

        try:
            env = bb_test.get_bitbake_env(recipe)
        except sh.ErrorReturnCode:
            print('Error running bitbake -e {}, skipping'.format(recipe))
            continue
        package_path = env['BUILDHISTORY_DIR_PACKAGE']

        if not os.path.exists(os.path.join(args.outputdir,
                                           'buildhistory', package_path)):
            # We can't check to see if the output changed on these at this
            # time, since we're using buildhistory, so we might as well skip
            # rebuilding them.
            print('Skipping {}, as it has no buildhistory'.format(recipe))
            continue

        with chdir(os.path.join(args.outputdir, 'buildhistory')):
            revs = sh.git('rev-list', 'HEAD', '-2', package_path).splitlines()

        if (len(revs) < 2):
            # If build has no changes a dummy commit will be made to build history 
            # so buildhistory/packages/* will have only 1 commit related to initial build.
            print('Skipping {}: no change in the history'.format(recipe))
            continue

        start_head = revs[1].rstrip()

        with bb_test.status('Cleaning {} [{}/{}]'.format(recipe, current, recipe_count)):
            bb_test.bitbake('-c', 'cleansstate', recipe)

        with bb_test.status('Rebuilding {} [{}/{}]'.format(recipe, current, recipe_count)):
            bb_test.bitbake(recipe)

        with contextlib.nested(chdir(os.path.join(args.outputdir, 'buildhistory')),
                               bb_test.status('Checking buildhistory for {}'.format(recipe))):
            buildhistory_diff = sh.buildhistory_diff(package_path, start_head)
            if buildhistory_diff:
                msg = "Differences in buildhistory for {}:\n{}".format(recipe, buildhistory_diff)
                if args.keep_going:
                    sys.stderr.write(msg + '\n')
                else:
                    sys.exit(msg)


if __name__ == '__main__':
    bb_test.run_main(main, sys.argv)
