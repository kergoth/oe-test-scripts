#!/usr/bin/env python2.7
#
# This is a simple script which uses a default configuration (poky/qemux86),
# and adds each available bsp or distro layer to the configuration, one at
# a time, monitoring for changes to the appended recipes with
# bitbake-whatchanged. This helps one to identify bsp layers which affect
# machines other than the ones it provides, and distro layers which affect
# other distros when included.
#
# This script expects the user to be in a functional bitbake environment (that
# is, the setup scripts sourced, with the current directory under the build
# directory).
#
# For layers which cause a delta, a text file holding the verbose
# bitbake-whatchanged output will be written to the current directory.
#
# If the attempt to parse the recipes in the layer, or the run of
# bitbake-whatchanged fails, testing of that layer will be skipped.


import argparse
import bb_test
import glob
import os
import sh
import sys


def main(cmdline_args):
    parser = argparse.ArgumentParser(description='Run leaky layer tests')
    parser.add_argument('--excluded', '-x',
                        default='poky/meta oe-core/meta poky/meta-yocto oe-core/meta-yocto',
                        help='layers to exclude from processing (default: %(default)s)')

    args = parser.parse_args(cmdline_args[1:])

    try:
        bitbake_env = bb_test.get_bitbake_env()
    except sh.CommandNotFound:
        sys.exit("Error: unable to run bitbake, did you source the setup script?")
    except sh.ErrorReturnCode as exc:
        sys.exit("Error running bitbake -e: {0}".format(exc.message))

    layers = set()
    corebase = bitbake_env['COREBASE']
    lconfs = set(glob.glob('{0}/../*/conf/layer.conf'.format(corebase)))
    lconfs |= set(glob.glob('{0}/../*/*/conf/layer.conf'.format(corebase)))
    for lconf in lconfs:
        layerpath = lconf[:-len('/conf/layer.conf')]
        is_machine_layer = bool(glob.glob('{0}/conf/machine/*.conf'.format(layerpath)))
        is_distro_layer = bool(glob.glob('{0}/conf/distro/*.conf'.format(layerpath)))
        if is_machine_layer or is_distro_layer:
            layers.add(layerpath)

    stampsdir = bitbake_env['STAMPS_DIR']
    baseline_stampdir = '{0}.baseline'.format(stampsdir)

    tmpdir = bitbake_env['TMPDIR']
    excluded = args.excluded.split()
    for layerpath in sorted(layers):
        layerbase = layerpath[len('{0}/../'.format(corebase)):]
        if layerbase in args.excluded:
            continue

        sh.rm('-rf', tmpdir)

        filter_lines('conf/bblayers.conf', lambda l: not l.startswith('BBLAYERS =+ '))
        with open('conf/bblayers.conf', 'a') as f:
            f.write('BBLAYERS =+ "{0}"\n'.format(layerpath))

        try:
            with bb_test.status('Testing parsing for {0}'.format(layerbase)) as s:
                bb_test.bitbake('-p')
        except sh.ErrorReturnCode:
            continue

        targets = set()
        with bb_test.status('Gathering appends for {0}'.format(layerbase)) as s:
            try:
                output = bb_test.run('bitbake-layers', 'show-appends')
            except sh.ErrorReturnCode as exc:
                s.set_status('skipped')
            else:
                for line in output.splitlines():
                    line = line.strip()
                    if line.startswith(layerpath + '/'):
                        filename = os.path.basename(line)
                        base, ext = os.path.splitext(filename)
                        if ext == '.bbappend':
                            targets.add(base.split('_')[0])

        with bb_test.status('Generating baseline data for {0}: {1}'.format(layerbase, ', '.join(targets))):
            filter_lines('conf/bblayers.conf', lambda l: not l.startswith('BBLAYERS =+ '))
            for target in list(targets):
                try:
                    bb_test.bitbake('-S', target)
                except sh.ErrorReturnCode:
                    # Failed to generate sig data for the target, most likely
                    # due to it being skipped
                    targets.remove(target)

        if not targets:
            continue

        with open('conf/bblayers.conf', 'a') as f:
            f.write('BBLAYERS =+ "{0}"\n'.format(layerpath))

        for target in targets:
            with bb_test.status('Testing {0}: {1}'.format(layerbase, target)) as s:
                try:
                    output = bb_test.run('bitbake-whatchanged', target)
                except sh.ErrorReturnCode as exc:
                    sys.exit("Error testing {0}: {1}".format(layerbase, exc.message))
                else:
                    if (not output or
                        any(m in output for m in ['ERROR message shown', 'Summary: (0 changed'])):
                        continue

                    verbose_fn = 'bitbake-whatchanged.{0}.{1}'.format(layerbase.replace('/', '_'), target)
                    verbose = bb_test.run('bitbake-whatchanged', '-v', target)
                    with open(verbose_fn, 'w') as f:
                        f.write(verbose)
                    s.set_status('modified (see `{0}`)'.format(verbose_fn))


def filter_lines(filename, keepfunc):
    with open(filename, 'rU') as f:
        lines = f.readlines()

    with open(filename, 'w') as f:
        lines = filter(keepfunc, lines)
        f.writelines(lines)


if __name__ == '__main__':
    bb_test.run_main(main, sys.argv)
